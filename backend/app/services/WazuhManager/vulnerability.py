from typing import Any
from typing import Dict
from typing import List
from typing import Optional

import requests
from loguru import logger

from app.services.WazuhManager.universal import UniversalService


class WazuhHttpRequests:
    """
    Class to handle HTTP requests to the Wazuh API.

    Attributes:
        connector_url (str): The URL of the Wazuh Manager.
        wazuh_auth_token (str): The Wazuh API authentication token.
        headers (Dict[str, str]): Headers to use for the HTTP requests.
    """


    def __init__(self, connector_url: str, wazuh_auth_token: str) -> None:
        """
        Initialize a WazuhHttpRequests instance.

        Args:
            connector_url (str): The URL of the Wazuh Manager.
            wazuh_auth_token (str): The Wazuh API authentication token.
        """
        self.connector_url = connector_url
        self.wazuh_auth_token = wazuh_auth_token
        self.headers = {"Authorization": f"Bearer {wazuh_auth_token}"}

    def get_request(
        self,
        endpoint: str,
        params: Optional[Dict[str, Any]] = None,
    ) -> Optional[Dict[str, Any]]:
        """
        Send a GET request to the specified endpoint.

        Args:
            endpoint (str): The endpoint to make a GET request to.
            params (Optional[Dict[str, Any]]): Any parameters to pass in the GET request.

        Returns:
            Optional[Dict[str, Any]]: The response from the GET request as a dictionary.
        """
        try:
            response = requests.get(
                f"{self.connector_url}/{endpoint}",
                headers=self.headers,
                params=params,
                verify=False,
            )
            response.raise_for_status()
            return response.json()

        except Exception as e:
            logger.error(
                f"GET request to {self.connector_url}/{endpoint} failed with error: {e}",
            )
            return None


class VulnerabilityService:
    """
    Class to manage operations with the Wazuh Manager API related to vulnerabilities.

    Attributes:
        universal_service (UniversalService): The UniversalService instance to use.
        auth_token (str): The Wazuh API authentication token.
        wazuh_http_requests (WazuhHttpRequests): A WazuhHttpRequests instance to handle HTTP requests.
    """

    def __init__(self, universal_service: UniversalService) -> None:
        """
        Initialize a VulnerabilityService instance.

        Args:
            universal_service (UniversalService): The UniversalService instance to use.
        """
        self.universal_service = universal_service
        self.auth_token = universal_service.get_auth_token()
        self.wazuh_http_requests = WazuhHttpRequests(
            self.universal_service.connector_url,
            self.auth_token,
        )

    def agent_vulnerabilities(self, agent_id: str) -> List[Dict[str, Any]]:
        """
        Retrieve and process vulnerabilities for a specified agent.

        Args:
            agent_id (str): The id of the agent to get vulnerabilities for.

        Returns:
            List[Dict[str, Any]]: A list of processed vulnerabilities.
        """
        response = self.wazuh_http_requests.get_request(
            f"vulnerability/{agent_id}",
            params={"wait_for_complete": True},
        )

        if response is not None:
            processed_vulnerabilities = self._process_agent_vulnerabilities(response)
            return processed_vulnerabilities
        return []

    def _process_agent_vulnerabilities(
        self,
        response: Dict[str, Any],
    ) -> List[Dict[str, Any]]:
        """
        Process the raw vulnerabilities data for an agent.

        Args:
            response (Dict[str, Any]): The raw vulnerabilities data from Wazuh Manager.

        Returns:
            List[Dict[str, Any]]: A list of processed vulnerabilities.
        """
        vulnerabilities = response.get("data", {}).get("affected_items", [])
        # Use list comprehension to create the processed_vulnerabilities list
        processed_vulnerabilities = [
            {
                "severity": vuln.get("severity"),
                "updated": vuln.get("updated"),
                "version": vuln.get("version"),
                "type": vuln.get("type"),
                "name": vuln.get("name"),
                "external_references": vuln.get("external_references"),
                "condition": vuln.get("condition"),
                "detection_time": vuln.get("detection_time"),
                "cvss3_score": vuln.get("cvss3_score"),
                "published": vuln.get("published"),
                "architecture": vuln.get("architecture"),
                "cve": vuln.get("cve"),
                "status": vuln.get("status"),
                "title": vuln.get("title"),
                "cvss2_score": vuln.get("cvss2_score"),
            }
            for vuln in vulnerabilities
        ]
        return processed_vulnerabilities
